// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dubbo/v1alpha1/service_metadata.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceMetadataServiceClient is the client API for ServiceMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceMetadataServiceClient interface {
	Publish(ctx context.Context, in *PublishServiceMetadataRequest, opts ...grpc.CallOption) (*PublishServiceMetadataResponse, error)
	Get(ctx context.Context, in *GetServiceMetadataRequest, opts ...grpc.CallOption) (*GetServiceMetadataResponse, error)
}

type serviceMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceMetadataServiceClient(cc grpc.ClientConnInterface) ServiceMetadataServiceClient {
	return &serviceMetadataServiceClient{cc}
}

func (c *serviceMetadataServiceClient) Publish(ctx context.Context, in *PublishServiceMetadataRequest, opts ...grpc.CallOption) (*PublishServiceMetadataResponse, error) {
	out := new(PublishServiceMetadataResponse)
	err := c.cc.Invoke(ctx, "/dubbo.networking.v1alpha1.ServiceMetadataService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMetadataServiceClient) Get(ctx context.Context, in *GetServiceMetadataRequest, opts ...grpc.CallOption) (*GetServiceMetadataResponse, error) {
	out := new(GetServiceMetadataResponse)
	err := c.cc.Invoke(ctx, "/dubbo.networking.v1alpha1.ServiceMetadataService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceMetadataServiceServer is the server API for ServiceMetadataService service.
// All implementations must embed UnimplementedServiceMetadataServiceServer
// for forward compatibility
type ServiceMetadataServiceServer interface {
	Publish(context.Context, *PublishServiceMetadataRequest) (*PublishServiceMetadataResponse, error)
	Get(context.Context, *GetServiceMetadataRequest) (*GetServiceMetadataResponse, error)
	mustEmbedUnimplementedServiceMetadataServiceServer()
}

// UnimplementedServiceMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceMetadataServiceServer struct {
}

func (UnimplementedServiceMetadataServiceServer) Publish(context.Context, *PublishServiceMetadataRequest) (*PublishServiceMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedServiceMetadataServiceServer) Get(context.Context, *GetServiceMetadataRequest) (*GetServiceMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceMetadataServiceServer) mustEmbedUnimplementedServiceMetadataServiceServer() {
}

// UnsafeServiceMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceMetadataServiceServer will
// result in compilation errors.
type UnsafeServiceMetadataServiceServer interface {
	mustEmbedUnimplementedServiceMetadataServiceServer()
}

func RegisterServiceMetadataServiceServer(s grpc.ServiceRegistrar, srv ServiceMetadataServiceServer) {
	s.RegisterService(&ServiceMetadataService_ServiceDesc, srv)
}

func _ServiceMetadataService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishServiceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMetadataServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubbo.networking.v1alpha1.ServiceMetadataService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMetadataServiceServer).Publish(ctx, req.(*PublishServiceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMetadataService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMetadataServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubbo.networking.v1alpha1.ServiceMetadataService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMetadataServiceServer).Get(ctx, req.(*GetServiceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceMetadataService_ServiceDesc is the grpc.ServiceDesc for ServiceMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dubbo.networking.v1alpha1.ServiceMetadataService",
	HandlerType: (*ServiceMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ServiceMetadataService_Publish_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ServiceMetadataService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dubbo/v1alpha1/service_metadata.proto",
}
